plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
	id 'org.jetbrains.kotlin.jvm' version '1.8.10'
}

archivesBaseName = project.archives_base_name
version = "${project.version}+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
	maven { url = 'https://maven.parchmentmc.org' }
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	mavenCentral()
}
configurations {
	includeImplementation
	include.extendsFrom includeImplementation
	implementation.extendsFrom includeImplementation
}
dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.19.3:2023.02.05@zip")
	}
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
	implementation 'com.squareup.okhttp3:okhttp:4.10.0'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"



	includeImplementation 'com.github.ben-manes.caffeine:caffeine:3.1.1'
	modImplementation libs.quilted.fabric.api
	modImplementation libs.quilt.loader

	//modImplementation project(":RDI-LucidFont")
	modImplementation("maven.modrinth:modmenu:5.0.2")
	modImplementation("maven.modrinth:sodium:mc1.19.3-0.4.9")
	modImplementation("maven.modrinth:lazydfu:0.1.3")
	modImplementation("maven.modrinth:ferrite-core:5.1.0-fabric")
	modImplementation("maven.modrinth:indium:1.0.14+mc1.19.3")

}
loom {
	accessWidenerPath = file("src/main/resources/rdi.accesswidener")
}

processResources {
	inputs.property 'version', version
	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE') {
		rename { "${it}_${archivesBaseName}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}
